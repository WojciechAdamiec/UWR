Wojciech Adamiec
Zadania: 1, 2, 3, 4, 5, 6
Punkty: 7
=============================
Zad. 1

1.)

Dla:

X 1 1
1
1

Mamy:

# .
. #

i

. #
# .

Sa to wszystkie rozwiazania 
(w sumie mamy 2^4 mo¿liwosci, latwo zauwa¿yc, ¿e tylko 2/16 mo¿liwosci spelniaja zadanie)

2.)

Dla:

X 1 1 1
1
1
1

Czyli dla wymiaru 3 x 3

Mamy miedzy innymi:

# . .
. # .
. . #

. # .
. . #
# . .

. . #
# . .
. # .

. . #
. # .
# . .

A zatem rozwiazan jest wiecej niz 3.
------------------------------------
Zad. 2

Stanem jest informacja o aktualnym polo¿eniu (jakie miasto) oraz ilosci paliwa w baku.

Stan poczatkowy i koncowy jest oczywisty.

Akcjami sa takie przejazdy, ¿e:

1. Nowe miasto jest polaczone w grafie z aktualnym miastem.
2. Koszt przejazdu jest mniejszy-równy od aktualnej ilosci paliwa.

Wtedy stan zmiania sie tak, ¿e:

1. Aktualne polo¿enie <--- nowe miasto
2a. Ilosc paliwa <---- Ilosc paliwa - koszt przejazdu, gdy w nowym miescie nie ma stacji paliw
lub
2b. Ilosc paliwa <---- max. Ilosc paliwa w baku, gdy w nowym miescie jest stacja paliw
-----------------------------------
Zad. 3

Zadanie jest troche niedoprecyzowane i niestety nie wiem na co moge sobie pozwolic. Zdecydowalem, ¿e najlepszym rozwiazaniem bedzie przed wlaczeniem algorytmu A* zrobienie pewnej inicjalizacji. Planuje wlaczyc algorytm Djikstry zaczynajac go od naszego celu podró¿y, tak, ¿e ka¿demu wierzcholkowi przypisze odleglosc wyliczana tym algorytmem od naszego celu. Podczas dzialania tego algorytmu nie bede wgl zwracal uwagi na paliwo, optymistycznie zalo¿e, ¿e da sie podró¿owac miedzy ka¿dymi miastami, miedzy którymi w oryginalnym grafie jest krawedz. W ten sposób podczas dzialania naszego glównego algorytmu A* heurystyka bedzie po prostu wartosc zapisana przy wierzcholku podczas inicjalizacji. Mamy pewnosc, ¿e jest to heurystyka optymistyczna (jak sie da dojechac uwzgledniajac paliwo, to bez niego bedzie co najmniej tak samo szybko). Problem jaki widze jest taki, ¿e byc moze nasz graf jest bardzo du¿y lub wrecz nieskonczony. W takim przypadku nie chcemy Djikstry wykonywac dla calego grafu, a tylko dla jego czesci. Trzeba by jakos sensownie zdecydowac dla jak wielu (i których wierzcholków) chcemy wykonac Djikstre.
-----------------------------------
Zad. 4

Bedziemy chcieli zrobic to samo co w zadaniu 3. Dodatkowo musimy policzyc srednia wartosc krawedzi w grafie (lub mediane?). Nastepnie liczymy wspólczynnik:
D = Max pojemnosc baku / srednia wartosc krawedzi. Ten wspólczynnik przechowuje informacje ile srednio krawedzi mo¿emy przejechac na pelnym baku. Nastepnie wracamy do rozwiazania z zad. 3 oprócz tego, ¿e znajdujemy odleglosc od celu dla ka¿dego wierzcholka algorytmem Djikstry to chcemy dodatkowo uwzgledniac, ¿e w danym wierzcholku znajduje sie stacja paliw. W tym celu odejmujemy dla takiego wierzcholka od minimalnej dlugosci do celu jeszcze wartosc: np. C * 1/D, gdzie C to jakas stala, w ten sposób A* bedzie preferowal drogi przez miasta ze stacjami paliw, a to "preferowanie" jest uzale¿nione od tego, jak czesto musimy srednio odwiedzac takie stacje. (Jesli srednio co 2 miasta musimy tankowac to wtedy 1/D jest du¿e (1/2), ale jesli tankowac musimy srednio co 30 miast to wówczas 1/D jest male (1/30). Heurystyka jest dalej optymistyczna (skoro w zad. 3 byla, a teraz tylko odejmujemy jakies wartosci od wierzcholków to nadal jest optymistyczne). Dbamy, ¿eby nie wejsc na ujemne liczby (najni¿ej jak mo¿e byc to 0). Heurystyka ta byc mo¿e nie jest spójna, nie jestem w stanie rozstrzygnac tego czy jest 'sensowna'. Jestem w stanie podac przyklad grafu, gdzie zadziala ona lepiej ni¿ ta z Zad. 3, ale równie¿ moge podac kontrprzyklad. Pytanie jak sprawa bedzie wygladac dla "usrednionego" grafu.

-----------------------------------
Zad. 5

1.)

Ka¿dy skoczek mo¿e albo zostac w miejscu albo przejsc na jedno z 8 pól. (szacowanie z góry) Kiedy mam podzbiór 2 skoczków to wówczas ka¿dy z nich mo¿e sie przemiescic na 9 sposobów, a zatem jest w sumie 9 * 9 ró¿nych stanów koncowych (po tym ruchu). Uogólniajac dla podzbioru k skoczków mamy rozgalezienie nie wieksze ni¿ 9 ^ k. (Prawodopodobnie jest troche mniejsze, tutaj dokladnosc dla ruchu stania w miejscu)

2.)
Heurystyka optymistyczna to taka, ¿e dla ka¿dego wierzcholka zwraca wartosc, która jest co najwy¿ej tak du¿a jak prawdziwa odleglosc do celu.

Zrozumialem to zadanie tak, ¿e przenosimy ciag skoczków w jakies tam miejsca. Mamy jedna heurystyke h.

A)

Min jest na pewno bardziej optymistyczne od maksimum, wiec poka¿e dla maximum.

B)

Maximum zwróci nam minimalna ilosc ruchów potrzebnych do przestawienia nam 'najgorszego' skoczka (lub mniejsza od faktycznej ilosci ruchów). Jesli chcemy przestawic ciag skoczków to w szczególnosci musimy przestawic równie¿ tego 'najgorszego', dla którego heurystyka jest optymistyczna. (faktyczna liczba ruchów jest nie mniejsza ni¿ optymistyczna heurystyka dla 'najgorszego') Zatem ta heurystyka równie¿ jest optymistyczna.

C)

To nie jest heurystyka optymistyczna. Kontrprzyklad:
Niech h bedzie zwracac 3/4 ilosci faktycznych ruchów potrzebnych do przestawienia skoczka (zaokraglajac w góre). Wtedy h jest optymistyczna. Dla 2 skoczków, z których ka¿dy potrzebuje 1 ruchu, aby dotrzec do celu suma heurystyk zwróci nam 2, kiedy mo¿na dotrzec do celu w jednym ruchu. (Wybierajac podzbiór 2 skoczków i przesuwajac ich do celu)

3.) Nie rozumiem do czego odnosi sie podpunkt.
Jesli do podpunktu 1.) Wówczas dla pozbioru k skoczków wybieramy jednego z nich na k sposobów i mo¿na go ruszyc na 8 sposobów. Mamy zatem max. rozgalezienie 8k.

dla A, B, C:

Zauwa¿my, ¿e z tych heurystyk najwieksza jest zawsze C, poka¿e zatem tylko, ¿e C istotnie jest heurystyka (pozostale wtedy te¿ musza byc).

Skoro w ka¿dym ruchu przenosimy tylko jednego skoczka, to wtedy w sumie musimy wykonac co najmniej tyle ruchów ile musielibysmy zrobic przesuwajac po kolei skoczków niezale¿nie od siebie (ignorujemy pozycje pozostalych). Nasza heurystyka jest bardziej optymistyczna, bo dla ka¿dego skoczka osobno bierzemy ilosc ruchów mniejsza równa faktycznej ilosci ruchów potrzebnych do dotarcia do celu. (Dodatkowo nie przejmujemy sie jeszcze tym, ¿e skoczki moga sie wzajemnie blokowac). Zatem jest to heurystyka optymistyczna.

-----------------------------------
Zad. 6

import numpy as np
from random import choice

N = 8
queens = []

Board = np.zeros((N, N), dtype=int)


def add(x, y):
	Board[x][y] = 1


def remove(x, y):
	Board[x][y] = 0


def ok(x, y):
	for queen in queens:
		if x == queen[0] or y == queen[1]:
		return False
	if abs(queen[0] - x) == abs(queen[1] - y):
		return False
	return True


def work():
	i = 0
	while i < N:
		news = []
		for j in range(N):
			if ok(i, j):
			news.append((i, j))
		if not news:
			i = 0
			queens.clear()
		else:
			chosen = choice(news)
			queens.append(chosen)
			i = i + 1
	for queen in queens:
		add(queen[0], queen[1])


work()
print(Board)

1.)
Lekka modyfikacja i program pozwala policzyc pierwszy podpunkt (dla wywolania work du¿o razy).
Wynik to: 0.069456

2.) 
Wyrzucam wyswietlanie planszy i robie kilka optymalizacji, wtedy dla N=70 jestem w stanie jeszcze wykonac zadanie w 5 sekund, przy czym problemem jest tutaj niestabilnosc algorytmu, czasem potrzeba 2 sekund czasem 7, zatem ustalenie dokladnej liczby jest niemo¿liwe, przy odrobinie szczescia (byc mo¿e sporej odrobinie) mo¿emy ka¿de ulo¿enie zrobic za pierwszym razem.


-----------------------------------

 